<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.cfp.mapper.ProposalMapper">

    <resultMap id="ProposalMap" type="io.cfp.model.Proposal" autoMapping="true">
        <id property="id" column="id" jdbcType="VARCHAR"/>
        <collection property="cospeakers" ofType="io.cfp.model.User">
            <id property="id" column="cospeaker_id" jdbcType="INTEGER"/>
            <result property="name" column="category_email" jdbcType="VARCHAR"/>
            <result property="firstname" column="category_firstname" jdbcType="VARCHAR"/>
            <result property="lastname" column="category_lastname" jdbcType="VARCHAR"/>
        </collection>
    </resultMap>

    <sql id="proposalColumns">
        SELECT
            *,
            e.id as "eventId",
            p.schedule_date as "schedule",
            p.refs as "references",
            f.id as "formatId",
            r.id as "roomId",
            t.id as "trackId",
            t.libelle as "trackLabel",
            u.id as "speaker.id",
            u.email as "speaker.email",
            u.bio as "speaker.bio",
            u.company as "speaker.company",
            u.firstname as "speaker.firstname",
            u.lastname as "speaker.lastname",
            u.gender as "speaker.gender",
            u.github as "speaker.github",
            u.googleplus as "speaker.googleplus",
            u.image_profil_url as "speaker.imageProfilURL",
            u.language as "speaker.language",
            u.phone as "speaker.phone",
            u.social as "speaker.social",
            u.tshirt_size as "speaker.tshirtSize",
            u.twitter as "speaker.twitter",
            cu.id as "cospeaker_id",
            cu.email as "cospeaker_email",
            cu.firstname as "cospeaker_firstname",
            cu.lastname as "cospeaker_lastname"
        FROM proposals p
            left outer join events e on p.event_id = e.id
            left outer join formats f on p.format = f.id
            left outer join rooms r on p.room_id = r.id
            left outer join tracks t on p.track = t.id
            left outer join users u on p.user = u.id
            left outer join cospeakers c on c.proposal_id = p.id
            left outer join users cu on c.user_id = cu.id
    </sql>

    <select id="findAll" parameterType="io.cfp.model.queries.ProposalQuery" resultMap="ProposalMap">
        <include refid="proposalColumns"/>
        <where>
            <if test="eventId">
                p.event_id = #{eventId}
            </if>
            <if test="userId">
                p.user = #{userId}
            </if>
            <if test="state">
                p.state = #{state}
            </if>
        </where>
    </select>

    <select id="findById" resultMap="ProposalMap">
        <include refid="proposalColumns"/>
        WHERE p.id = #{id}
    </select>

    <select id="count" parameterType="io.cfp.model.queries.ProposalQuery" resultType="int">
        SELECT count(*)
        FROM proposals p
        <where>
            <if test="eventId">
                p.event_id = #{eventId}
            </if>
            <if test="userId">
                p.user = #{userId}
            </if>
            <if test="state">
                p.state = #{state}
            </if>
        </where>
    </select>

    <insert id="insert" parameterType="io.cfp.model.Proposal" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO proposals (
            state,
            name,
            description,
            refs,
            difficulty,
            added,
            user,
            format,
            schedule_date,
            track,
            event_id,
            language,
            room_id,
            video,
            slides
        ) VALUES (
            #{state},
            #{name},
            #{description},
            #{references},
            #{difficulty},
            #{added},
            #{speaker.id},
            #{formatId},
            #{schedule},
            #{trackId},
            #{eventId},
            #{language},
            #{roomId},
            #{video},
            #{slides}
        )
    </insert>

    <update id="updateForEvent">
        UPDATE proposals
        SET state=#{it.state},
            name=#{it.name},
            description=#{it.description},
            refs=#{it.references},
            difficulty=#{it.difficulty},
            added=#{it.added},
            user=#{it.speaker.id},
            format=#{it.formatId},
            schedule_date=#{it.schedule},
            track=#{it.trackId},
            language=#{it.language},
            room_id=#{it.roomId},
            video=#{it.video},
            slides=#{it.slides}
        WHERE id = #{it.id}  AND event_id = #{eventId}
    </update>

    <delete id="deleteForEvent">
        DELETE FROM proposals
        WHERE id = #{id} AND event_id = #{eventId}
    </delete>

</mapper>
